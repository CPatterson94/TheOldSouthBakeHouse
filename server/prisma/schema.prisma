// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  RECEIVED
  BAKING
  PACKING
  OUT_FOR_DELIVERY
  COMPLETED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String // hashed
  phone     String?
  isAdmin   Boolean  @default(false)
  orders    Order[]
  createdAt DateTime @default(now())
}

model Product {
  id             Int                   @id @default(autoincrement())
  name           String
  description    String?
  price          Float
  imageUrl       String?
  category       String
  stock          Int                   @default(0)
  status         ProductStatus         @default(ACTIVE)
  isDeleted      Boolean               @default(false)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  orderItems     OrderItem[]
  availabilities ProductAvailability[]
}

model ProductAvailability {
  id          Int      @id @default(autoincrement())
  productId   Int
  weekStart   DateTime
  weekEnd     DateTime
  maxQuantity Int
  product     Product  @relation(fields: [productId], references: [id])
}

model PickupSlot {
  id         Int      @id @default(autoincrement())
  location   String
  date       DateTime
  timeWindow String
  active     Boolean  @default(true)
  orders     Order[]
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  pickupSlotId  Int
  status        OrderStatus @default(PENDING)
  paymentMethod String      @default("venmo")
  totalAmount   Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  pickupSlot PickupSlot  @relation(fields: [pickupSlotId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float // price at time of order

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
